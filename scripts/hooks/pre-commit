#!/bin/bash

# Pre-commit hook for Neovim config

# Get the top level of the git repository
TOP_LEVEL=$(git rev-parse --show-toplevel)
cd "$TOP_LEVEL" || exit 1

# Check for stylua
if ! command -v stylua &> /dev/null; then
  echo "Error: stylua is not installed. Please install it to format Lua code."
  echo "You can install it from: https://github.com/JohnnyMorganz/StyLua"
  exit 1
fi

# Check for luacheck
if ! command -v luacheck &> /dev/null; then
  echo "Warning: luacheck is not installed. Skipping lint checks."
  echo "You can install it using luarocks: luarocks install luacheck"
  HAS_LUACHECK=0
else
  HAS_LUACHECK=1
fi

# Get all staged Lua files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.lua$')

if [ -n "$STAGED_FILES" ]; then
  echo "Running StyLua on staged Lua files..."
  
  # Format all staged Lua files
  for FILE in $STAGED_FILES; do
    stylua "$FILE"
    git add "$FILE"
  done
  
  echo "Lua files have been formatted and staged."
  
  # Run luacheck if available
  if [ "$HAS_LUACHECK" -eq 1 ]; then
    echo "Running luacheck on staged Lua files..."
    LINT_ISSUES=0
    FIXABLE_ISSUES=0
    FIXED_FILES=""
    
    # First check for issues that we can automatically fix
    for FILE in $STAGED_FILES; do
      # Auto-fix trailing whitespace
      if grep -q "[[:space:]]$" "$FILE"; then
        sed -i 's/[[:space:]]*$//' "$FILE"
        FIXABLE_ISSUES=1
        FIXED_FILES="$FIXED_FILES $FILE"
      fi
      
      # Auto-fix line endings (ensure LF)
      if file "$FILE" | grep -q "CRLF"; then
        dos2unix "$FILE" 2>/dev/null
        FIXABLE_ISSUES=1
        FIXED_FILES="$FIXED_FILES $FILE"
      fi
      
      # Check for unused variables that can be prefixed with _ to ignore
      UNUSED_VARS=$(luacheck "$FILE" --formatter=plain 2>/dev/null | grep -o "unused variable '[^']*'" | grep -o "'[^']*'" | tr -d "'")
      if [ -n "$UNUSED_VARS" ]; then
        for VAR in $UNUSED_VARS; do
          # Only fix if not already prefixed with _
          if [[ ! $VAR == _* ]]; then
            # Replace instances of the variable with _variable
            sed -i "s/\b$VAR\b/_$VAR/g" "$FILE"
            FIXABLE_ISSUES=1
            FIXED_FILES="$FIXED_FILES $FILE"
          fi
        done
      fi
      
      # Check for undefined variable Snacks
      UNDEFINED_SNACKS=$(luacheck "$FILE" --formatter=plain 2>/dev/null | grep -o "accessing undefined variable 'Snacks'")
      if [ -n "$UNDEFINED_SNACKS" ]; then
        # Find good insertion point (after local declarations at the top)
        LAST_LOCAL_LINE=$(grep -n "^local " "$FILE" | tail -n 1 | cut -d':' -f1)
        if [ -n "$LAST_LOCAL_LINE" ]; then
          # Add import after the last local line
          sed -i "${LAST_LOCAL_LINE}a local Snacks = require(\"snacks\")" "$FILE"
        else
          # If no local lines, add at beginning of the file
          sed -i "1i local Snacks = require(\"snacks\")" "$FILE"
        fi
        FIXABLE_ISSUES=1
        FIXED_FILES="$FIXED_FILES $FILE"
      fi
    done
    
    # If we fixed any issues, add them back to staging
    if [ "$FIXABLE_ISSUES" -eq 1 ]; then
      echo "Fixed some linting issues automatically in:$FIXED_FILES"
      for FILE in $FIXED_FILES; do
        git add "$FILE"
      done
    fi
    
    # Now run the full luacheck to see if there are remaining issues
    for FILE in $STAGED_FILES; do
      luacheck "$FILE"
      if [ $? -ne 0 ]; then
        LINT_ISSUES=1
      fi
    done
    
    if [ "$LINT_ISSUES" -eq 1 ]; then
      echo "Error: Lua lint issues found that couldn't be fixed automatically."
      echo "Please fix the remaining issues before committing."
      echo "You can bypass this check with git commit --no-verify"
      exit 1
    fi
  fi
  
  # Run tests
  echo "Running tests to ensure code quality..."
  if command -v nvim &> /dev/null; then
    # First run basic tests for backward compatibility
    nvim --headless --noplugin -u test/minimal.vim -c "source test/basic_test.vim" -c "qa!" 2>/dev/null
    BASIC_TEST_RESULT=$?
    
    # Check if Plenary tests exist and run them
    if [ -d "tests/spec" ]; then
      echo "Running Plenary tests..."
      
      # Set up Lua path
      export LUA_PATH="$TOP_LEVEL/lua/?.lua;$TOP_LEVEL/lua/?/init.lua;$LUA_PATH;;"
      export LUA_CPATH="$LUA_CPATH;;"
      
      # Run our own test suite instead of plenary test harness
      nvim --headless --noplugin -u tests/minimal-init.lua \
        -c 'lua require("tests.run_tests").run_tests("tests/spec")' \
        -c 'lua if vim.v.exiting == 0 then vim.cmd("qall!") end'
      PLENARY_TEST_RESULT=$?
      
      # Check test results
      if [ $BASIC_TEST_RESULT -ne 0 ] || [ $PLENARY_TEST_RESULT -ne 0 ]; then
        echo "❌ Tests failed! Commit aborted."
        echo "Please fix the test failures before committing."
        echo "Run 'make test' to see detailed test output."
        echo "You can bypass this check with git commit --no-verify"
        exit 1
      else
        echo "✅ All tests passed."
      fi
    else
      # Only run basic tests if Plenary tests don't exist
      if [ $BASIC_TEST_RESULT -ne 0 ]; then
        echo "❌ Basic tests failed! Commit aborted."
        echo "Please fix the test failures before committing."
        echo "Run 'make test' to see detailed test output."
        echo "You can bypass this check with git commit --no-verify"
        exit 1
      else
        echo "✅ Basic tests passed."
      fi
    fi
  else
    echo "Warning: nvim not found in PATH. Skipping tests."
  fi
fi

exit 0